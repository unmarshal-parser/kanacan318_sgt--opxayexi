// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get isPaused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class ReceiveFromChain extends ethereum.Event {
  get params(): ReceiveFromChain__Params {
    return new ReceiveFromChain__Params(this);
  }
}

export class ReceiveFromChain__Params {
  _event: ReceiveFromChain;

  constructor(event: ReceiveFromChain) {
    this._event = event;
  }

  get srcChainId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get qty(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SendToChain extends ethereum.Event {
  get params(): SendToChain__Params {
    return new SendToChain__Params(this);
  }
}

export class SendToChain__Params {
  _event: SendToChain;

  constructor(event: SendToChain) {
    this._event = event;
  }

  get dstChainId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get to(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get qty(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__estimateSendTokensFeeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getNativeFee(): BigInt {
    return this.value0;
  }

  getZroFee(): BigInt {
    return this.value1;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  chainId(): i32 {
    let result = super.call("chainId", "chainId():(uint16)", []);

    return result[0].toI32();
  }

  try_chainId(): ethereum.CallResult<i32> {
    let result = super.tryCall("chainId", "chainId():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  dstContractLookup(param0: i32): Bytes {
    let result = super.call(
      "dstContractLookup",
      "dstContractLookup(uint16):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return result[0].toBytes();
  }

  try_dstContractLookup(param0: i32): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "dstContractLookup",
      "dstContractLookup(uint16):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  endpoint(): Address {
    let result = super.call("endpoint", "endpoint():(address)", []);

    return result[0].toAddress();
  }

  try_endpoint(): ethereum.CallResult<Address> {
    let result = super.tryCall("endpoint", "endpoint():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  estimateSendTokensFee(
    _dstChainId: i32,
    _useZro: boolean,
    txParameters: Bytes
  ): Contract__estimateSendTokensFeeResult {
    let result = super.call(
      "estimateSendTokensFee",
      "estimateSendTokensFee(uint16,bool,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_dstChainId)),
        ethereum.Value.fromBoolean(_useZro),
        ethereum.Value.fromBytes(txParameters)
      ]
    );

    return new Contract__estimateSendTokensFeeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_estimateSendTokensFee(
    _dstChainId: i32,
    _useZro: boolean,
    txParameters: Bytes
  ): ethereum.CallResult<Contract__estimateSendTokensFeeResult> {
    let result = super.tryCall(
      "estimateSendTokensFee",
      "estimateSendTokensFee(uint16,bool,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_dstChainId)),
        ethereum.Value.fromBoolean(_useZro),
        ethereum.Value.fromBytes(txParameters)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__estimateSendTokensFeeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMain(): boolean {
    let result = super.call("isMain", "isMain():(bool)", []);

    return result[0].toBoolean();
  }

  try_isMain(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMain", "isMain():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _endpoint(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _mainEndpointId(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _initialSupplyOnMainEndpoint(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ForceResumeReceiveCall extends ethereum.Call {
  get inputs(): ForceResumeReceiveCall__Inputs {
    return new ForceResumeReceiveCall__Inputs(this);
  }

  get outputs(): ForceResumeReceiveCall__Outputs {
    return new ForceResumeReceiveCall__Outputs(this);
  }
}

export class ForceResumeReceiveCall__Inputs {
  _call: ForceResumeReceiveCall;

  constructor(call: ForceResumeReceiveCall) {
    this._call = call;
  }

  get _srcChainId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _srcAddress(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ForceResumeReceiveCall__Outputs {
  _call: ForceResumeReceiveCall;

  constructor(call: ForceResumeReceiveCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class LzReceiveCall extends ethereum.Call {
  get inputs(): LzReceiveCall__Inputs {
    return new LzReceiveCall__Inputs(this);
  }

  get outputs(): LzReceiveCall__Outputs {
    return new LzReceiveCall__Outputs(this);
  }
}

export class LzReceiveCall__Inputs {
  _call: LzReceiveCall;

  constructor(call: LzReceiveCall) {
    this._call = call;
  }

  get _srcChainId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _fromAddress(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get nonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _payload(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class LzReceiveCall__Outputs {
  _call: LzReceiveCall;

  constructor(call: LzReceiveCall) {
    this._call = call;
  }
}

export class PauseSendTokensCall extends ethereum.Call {
  get inputs(): PauseSendTokensCall__Inputs {
    return new PauseSendTokensCall__Inputs(this);
  }

  get outputs(): PauseSendTokensCall__Outputs {
    return new PauseSendTokensCall__Outputs(this);
  }
}

export class PauseSendTokensCall__Inputs {
  _call: PauseSendTokensCall;

  constructor(call: PauseSendTokensCall) {
    this._call = call;
  }

  get _pause(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class PauseSendTokensCall__Outputs {
  _call: PauseSendTokensCall;

  constructor(call: PauseSendTokensCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SendTokensCall extends ethereum.Call {
  get inputs(): SendTokensCall__Inputs {
    return new SendTokensCall__Inputs(this);
  }

  get outputs(): SendTokensCall__Outputs {
    return new SendTokensCall__Outputs(this);
  }
}

export class SendTokensCall__Inputs {
  _call: SendTokensCall;

  constructor(call: SendTokensCall) {
    this._call = call;
  }

  get _dstChainId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _to(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _qty(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get zroPaymentAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get adapterParam(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SendTokensCall__Outputs {
  _call: SendTokensCall;

  constructor(call: SendTokensCall) {
    this._call = call;
  }
}

export class SetConfigCall extends ethereum.Call {
  get inputs(): SetConfigCall__Inputs {
    return new SetConfigCall__Inputs(this);
  }

  get outputs(): SetConfigCall__Outputs {
    return new SetConfigCall__Outputs(this);
  }
}

export class SetConfigCall__Inputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }

  get _version(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _chainId(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _configType(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _config(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SetConfigCall__Outputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }
}

export class SetDestinationCall extends ethereum.Call {
  get inputs(): SetDestinationCall__Inputs {
    return new SetDestinationCall__Inputs(this);
  }

  get outputs(): SetDestinationCall__Outputs {
    return new SetDestinationCall__Outputs(this);
  }
}

export class SetDestinationCall__Inputs {
  _call: SetDestinationCall;

  constructor(call: SetDestinationCall) {
    this._call = call;
  }

  get _dstChainId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _destinationContractAddress(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetDestinationCall__Outputs {
  _call: SetDestinationCall;

  constructor(call: SetDestinationCall) {
    this._call = call;
  }
}

export class SetReceiveVersionCall extends ethereum.Call {
  get inputs(): SetReceiveVersionCall__Inputs {
    return new SetReceiveVersionCall__Inputs(this);
  }

  get outputs(): SetReceiveVersionCall__Outputs {
    return new SetReceiveVersionCall__Outputs(this);
  }
}

export class SetReceiveVersionCall__Inputs {
  _call: SetReceiveVersionCall;

  constructor(call: SetReceiveVersionCall) {
    this._call = call;
  }

  get version(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetReceiveVersionCall__Outputs {
  _call: SetReceiveVersionCall;

  constructor(call: SetReceiveVersionCall) {
    this._call = call;
  }
}

export class SetSendVersionCall extends ethereum.Call {
  get inputs(): SetSendVersionCall__Inputs {
    return new SetSendVersionCall__Inputs(this);
  }

  get outputs(): SetSendVersionCall__Outputs {
    return new SetSendVersionCall__Outputs(this);
  }
}

export class SetSendVersionCall__Inputs {
  _call: SetSendVersionCall;

  constructor(call: SetSendVersionCall) {
    this._call = call;
  }

  get version(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetSendVersionCall__Outputs {
  _call: SetSendVersionCall;

  constructor(call: SetSendVersionCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
